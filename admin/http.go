// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package admin

import (
	"context"
	"net/http"

	httpcodec "github.com/RussellLuo/kok/pkg/codec/httpv2"
	"github.com/RussellLuo/kok/pkg/oasv2"
	"github.com/go-chi/chi"
	kithttp "github.com/go-kit/kit/transport/http"
)

func NewHTTPRouter(svc Admin, codecs httpcodec.Codecs) chi.Router {
	return NewHTTPRouterWithOAS(svc, codecs, nil)
}

func NewHTTPRouterWithOAS(svc Admin, codecs httpcodec.Codecs, schema oasv2.Schema) chi.Router {
	r := chi.NewRouter()

	if schema != nil {
		r.Method("GET", "/api", oasv2.Handler(OASv2APIDoc, schema))
	}

	var codec httpcodec.Codec
	var options []kithttp.ServerOption

	codec = codecs.EncodeDecoder("CreateRoute")
	r.Method(
		"POST", "/routes",
		kithttp.NewServer(
			MakeEndpointOfCreateRoute(svc),
			decodeCreateRouteRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreateService")
	r.Method(
		"POST", "/services",
		kithttp.NewServer(
			MakeEndpointOfCreateService(svc),
			decodeCreateServiceRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreateTenantCanaryPlugin")
	r.Method(
		"POST", "/plugins",
		kithttp.NewServer(
			MakeEndpointOfCreateTenantCanaryPlugin(svc),
			decodeCreateTenantCanaryPluginRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeletePlugin")
	r.Method(
		"DELETE", "/plugins/{name}",
		kithttp.NewServer(
			MakeEndpointOfDeletePlugin(svc),
			decodeDeletePluginRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteRoute")
	r.Method(
		"DELETE", "/routes/{name}",
		kithttp.NewServer(
			MakeEndpointOfDeleteRoute(svc),
			decodeDeleteRouteRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteService")
	r.Method(
		"DELETE", "/services/{name}",
		kithttp.NewServer(
			MakeEndpointOfDeleteService(svc),
			decodeDeleteServiceRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetPlugin")
	r.Method(
		"GET", "/plugins/{name}",
		kithttp.NewServer(
			MakeEndpointOfGetPlugin(svc),
			decodeGetPluginRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetRoute")
	r.Method(
		"GET", "/routes/{name}",
		kithttp.NewServer(
			MakeEndpointOfGetRoute(svc),
			decodeGetRouteRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetService")
	r.Method(
		"GET", "/services/{name}",
		kithttp.NewServer(
			MakeEndpointOfGetService(svc),
			decodeGetServiceRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListPlugins")
	r.Method(
		"GET", "/plugins",
		kithttp.NewServer(
			MakeEndpointOfListPlugins(svc),
			decodeListPluginsRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListRoutes")
	r.Method(
		"GET", "/routes",
		kithttp.NewServer(
			MakeEndpointOfListRoutes(svc),
			decodeListRoutesRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListServices")
	r.Method(
		"GET", "/services",
		kithttp.NewServer(
			MakeEndpointOfListServices(svc),
			decodeListServicesRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateRoute")
	r.Method(
		"PUT", "/routes/{name}",
		kithttp.NewServer(
			MakeEndpointOfUpdateRoute(svc),
			decodeUpdateRouteRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateService")
	r.Method(
		"PUT", "/services/{name}",
		kithttp.NewServer(
			MakeEndpointOfUpdateService(svc),
			decodeUpdateServiceRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	return r
}

func decodeCreateRouteRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreateRouteRequest

		if err := codec.DecodeRequestBody(r.Body, &_req.Route); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreateServiceRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreateServiceRequest

		if err := codec.DecodeRequestBody(r.Body, &_req.Svc); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreateTenantCanaryPluginRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreateTenantCanaryPluginRequest

		if err := codec.DecodeRequestBody(r.Body, &_req.P); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeletePluginRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeletePluginRequest

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteRouteRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteRouteRequest

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteServiceRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteServiceRequest

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetPluginRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetPluginRequest

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetRouteRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetRouteRequest

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetServiceRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetServiceRequest

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListPluginsRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		return nil, nil
	}
}

func decodeListRoutesRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		return nil, nil
	}
}

func decodeListServicesRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		return nil, nil
	}
}

func decodeUpdateRouteRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateRouteRequest

		if err := codec.DecodeRequestBody(r.Body, &_req.Route); err != nil {
			return nil, err
		}

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateServiceRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateServiceRequest

		if err := codec.DecodeRequestBody(r.Body, &_req.Svc); err != nil {
			return nil, err
		}

		name := chi.URLParam(r, "name")
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}
