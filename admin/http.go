// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package admin

import (
	"context"
	"net/http"

	"github.com/RussellLuo/kun/pkg/httpcodec"
	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/kun/pkg/oas2"
	"github.com/go-chi/chi"
	kithttp "github.com/go-kit/kit/transport/http"
)

func NewHTTPRouter(svc Admin, codecs httpcodec.Codecs, opts ...httpoption.Option) chi.Router {
	r := chi.NewRouter()
	options := httpoption.NewOptions(opts...)

	r.Method("GET", "/api", oas2.Handler(OASv2APIDoc, options.ResponseSchema()))

	var codec httpcodec.Codec
	var validator httpoption.Validator
	var kitOptions []kithttp.ServerOption

	codec = codecs.EncodeDecoder("CreatePlugin")
	validator = options.RequestValidator("CreatePlugin")
	r.Method(
		"POST", "/plugins",
		kithttp.NewServer(
			MakeEndpointOfCreatePlugin(svc),
			decodeCreatePluginRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreatePlugin")
	validator = options.RequestValidator("CreatePlugin")
	r.Method(
		"POST", "/routes/{routeName}/plugins",
		kithttp.NewServer(
			MakeEndpointOfCreatePlugin(svc),
			decodeCreatePlugin1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreatePlugin")
	validator = options.RequestValidator("CreatePlugin")
	r.Method(
		"POST", "/services/{serviceName}/plugins",
		kithttp.NewServer(
			MakeEndpointOfCreatePlugin(svc),
			decodeCreatePlugin2Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreateRoute")
	validator = options.RequestValidator("CreateRoute")
	r.Method(
		"POST", "/routes",
		kithttp.NewServer(
			MakeEndpointOfCreateRoute(svc),
			decodeCreateRouteRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreateRoute")
	validator = options.RequestValidator("CreateRoute")
	r.Method(
		"POST", "/services/{serviceName}/routes",
		kithttp.NewServer(
			MakeEndpointOfCreateRoute(svc),
			decodeCreateRoute1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("CreateService")
	validator = options.RequestValidator("CreateService")
	r.Method(
		"POST", "/services",
		kithttp.NewServer(
			MakeEndpointOfCreateService(svc),
			decodeCreateServiceRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeletePlugin")
	validator = options.RequestValidator("DeletePlugin")
	r.Method(
		"DELETE", "/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfDeletePlugin(svc),
			decodeDeletePluginRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeletePlugin")
	validator = options.RequestValidator("DeletePlugin")
	r.Method(
		"DELETE", "/routes/{routeName}/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfDeletePlugin(svc),
			decodeDeletePlugin1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeletePlugin")
	validator = options.RequestValidator("DeletePlugin")
	r.Method(
		"DELETE", "/services/{serviceName}/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfDeletePlugin(svc),
			decodeDeletePlugin2Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteRoute")
	validator = options.RequestValidator("DeleteRoute")
	r.Method(
		"DELETE", "/routes/{routeName}",
		kithttp.NewServer(
			MakeEndpointOfDeleteRoute(svc),
			decodeDeleteRouteRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteRoute")
	validator = options.RequestValidator("DeleteRoute")
	r.Method(
		"DELETE", "/services/{serviceName}/routes/{routeName}",
		kithttp.NewServer(
			MakeEndpointOfDeleteRoute(svc),
			decodeDeleteRoute1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteService")
	validator = options.RequestValidator("DeleteService")
	r.Method(
		"DELETE", "/services/{serviceName}",
		kithttp.NewServer(
			MakeEndpointOfDeleteService(svc),
			decodeDeleteServiceRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteService")
	validator = options.RequestValidator("DeleteService")
	r.Method(
		"DELETE", "/routes/{routeName}/service",
		kithttp.NewServer(
			MakeEndpointOfDeleteService(svc),
			decodeDeleteService1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 204),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetConfig")
	validator = options.RequestValidator("GetConfig")
	r.Method(
		"GET", "/config",
		kithttp.NewServer(
			MakeEndpointOfGetConfig(svc),
			decodeGetConfigRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetPlugin")
	validator = options.RequestValidator("GetPlugin")
	r.Method(
		"GET", "/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfGetPlugin(svc),
			decodeGetPluginRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetPlugin")
	validator = options.RequestValidator("GetPlugin")
	r.Method(
		"GET", "/routes/{routeName}/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfGetPlugin(svc),
			decodeGetPlugin1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetPlugin")
	validator = options.RequestValidator("GetPlugin")
	r.Method(
		"GET", "/services/{serviceName}/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfGetPlugin(svc),
			decodeGetPlugin2Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetRoute")
	validator = options.RequestValidator("GetRoute")
	r.Method(
		"GET", "/routes/{routeName}",
		kithttp.NewServer(
			MakeEndpointOfGetRoute(svc),
			decodeGetRouteRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetRoute")
	validator = options.RequestValidator("GetRoute")
	r.Method(
		"GET", "/services/{serviceName}/routes/{routeName}",
		kithttp.NewServer(
			MakeEndpointOfGetRoute(svc),
			decodeGetRoute1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetService")
	validator = options.RequestValidator("GetService")
	r.Method(
		"GET", "/services/{serviceName}",
		kithttp.NewServer(
			MakeEndpointOfGetService(svc),
			decodeGetServiceRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetService")
	validator = options.RequestValidator("GetService")
	r.Method(
		"GET", "/routes/{routeName}/service",
		kithttp.NewServer(
			MakeEndpointOfGetService(svc),
			decodeGetService1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetUpstream")
	validator = options.RequestValidator("GetUpstream")
	r.Method(
		"GET", "/upstreams/{upstreamName}",
		kithttp.NewServer(
			MakeEndpointOfGetUpstream(svc),
			decodeGetUpstreamRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetUpstream")
	validator = options.RequestValidator("GetUpstream")
	r.Method(
		"GET", "/services/{serviceName}/upstream",
		kithttp.NewServer(
			MakeEndpointOfGetUpstream(svc),
			decodeGetUpstream1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListPlugins")
	validator = options.RequestValidator("ListPlugins")
	r.Method(
		"GET", "/plugins",
		kithttp.NewServer(
			MakeEndpointOfListPlugins(svc),
			decodeListPluginsRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListPlugins")
	validator = options.RequestValidator("ListPlugins")
	r.Method(
		"GET", "/routes/{routeName}/plugins",
		kithttp.NewServer(
			MakeEndpointOfListPlugins(svc),
			decodeListPlugins1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListPlugins")
	validator = options.RequestValidator("ListPlugins")
	r.Method(
		"GET", "/services/{serviceName}/plugins",
		kithttp.NewServer(
			MakeEndpointOfListPlugins(svc),
			decodeListPlugins2Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListRoutes")
	validator = options.RequestValidator("ListRoutes")
	r.Method(
		"GET", "/routes",
		kithttp.NewServer(
			MakeEndpointOfListRoutes(svc),
			decodeListRoutesRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListRoutes")
	validator = options.RequestValidator("ListRoutes")
	r.Method(
		"GET", "/services/{serviceName}/routes",
		kithttp.NewServer(
			MakeEndpointOfListRoutes(svc),
			decodeListRoutes1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListServices")
	validator = options.RequestValidator("ListServices")
	r.Method(
		"GET", "/services",
		kithttp.NewServer(
			MakeEndpointOfListServices(svc),
			decodeListServicesRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("ListUpstreams")
	validator = options.RequestValidator("ListUpstreams")
	r.Method(
		"GET", "/upstreams",
		kithttp.NewServer(
			MakeEndpointOfListUpstreams(svc),
			decodeListUpstreamsRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdatePlugin")
	validator = options.RequestValidator("UpdatePlugin")
	r.Method(
		"PUT", "/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfUpdatePlugin(svc),
			decodeUpdatePluginRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdatePlugin")
	validator = options.RequestValidator("UpdatePlugin")
	r.Method(
		"PUT", "/routes/{routeName}/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfUpdatePlugin(svc),
			decodeUpdatePlugin1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdatePlugin")
	validator = options.RequestValidator("UpdatePlugin")
	r.Method(
		"PUT", "/services/{serviceName}/plugins/{pluginName}",
		kithttp.NewServer(
			MakeEndpointOfUpdatePlugin(svc),
			decodeUpdatePlugin2Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateRoute")
	validator = options.RequestValidator("UpdateRoute")
	r.Method(
		"PUT", "/routes/{routeName}",
		kithttp.NewServer(
			MakeEndpointOfUpdateRoute(svc),
			decodeUpdateRouteRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateRoute")
	validator = options.RequestValidator("UpdateRoute")
	r.Method(
		"PUT", "/services/{serviceName}/routes/{routeName}",
		kithttp.NewServer(
			MakeEndpointOfUpdateRoute(svc),
			decodeUpdateRoute1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateService")
	validator = options.RequestValidator("UpdateService")
	r.Method(
		"PUT", "/services/{serviceName}",
		kithttp.NewServer(
			MakeEndpointOfUpdateService(svc),
			decodeUpdateServiceRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateService")
	validator = options.RequestValidator("UpdateService")
	r.Method(
		"PUT", "/routes/{routeName}/service",
		kithttp.NewServer(
			MakeEndpointOfUpdateService(svc),
			decodeUpdateService1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateUpstream")
	validator = options.RequestValidator("UpdateUpstream")
	r.Method(
		"PUT", "/upstreams/{upstreamName}",
		kithttp.NewServer(
			MakeEndpointOfUpdateUpstream(svc),
			decodeUpdateUpstreamRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpdateUpstream")
	validator = options.RequestValidator("UpdateUpstream")
	r.Method(
		"PUT", "/services/{serviceName}/upstream",
		kithttp.NewServer(
			MakeEndpointOfUpdateUpstream(svc),
			decodeUpdateUpstream1Request(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	return r
}

func decodeCreatePluginRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreatePluginRequest

		if err := codec.DecodeRequestBody(r, &_req.P); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreatePlugin1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreatePluginRequest

		if err := codec.DecodeRequestBody(r, &_req.P); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreatePlugin2Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreatePluginRequest

		if err := codec.DecodeRequestBody(r, &_req.P); err != nil {
			return nil, err
		}

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreateRouteRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreateRouteRequest

		if err := codec.DecodeRequestBody(r, &_req.Route); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreateRoute1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreateRouteRequest

		if err := codec.DecodeRequestBody(r, &_req.Route); err != nil {
			return nil, err
		}

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeCreateServiceRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req CreateServiceRequest

		if err := codec.DecodeRequestBody(r, &_req.Svc); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeletePluginRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeletePluginRequest

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeletePlugin1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeletePluginRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeletePlugin2Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeletePluginRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteRouteRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteRouteRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteRoute1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteRouteRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteServiceRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteServiceRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteService1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteServiceRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetConfigRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		return nil, nil
	}
}

func decodeGetPluginRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetPluginRequest

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetPlugin1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetPluginRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetPlugin2Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetPluginRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetRouteRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetRouteRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetRoute1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetRouteRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetServiceRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetServiceRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetService1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetServiceRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetUpstreamRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetUpstreamRequest

		upstreamName := []string{chi.URLParam(r, "upstreamName")}
		if err := codec.DecodeRequestParam("upstreamName", upstreamName, &_req.UpstreamName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetUpstream1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetUpstreamRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListPluginsRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req ListPluginsRequest

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListPlugins1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req ListPluginsRequest

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListPlugins2Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req ListPluginsRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListRoutesRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req ListRoutesRequest

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListRoutes1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req ListRoutesRequest

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeListServicesRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		return nil, nil
	}
}

func decodeListUpstreamsRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		return nil, nil
	}
}

func decodeUpdatePluginRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdatePluginRequest

		if err := codec.DecodeRequestBody(r, &_req.Plugin); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdatePlugin1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdatePluginRequest

		if err := codec.DecodeRequestBody(r, &_req.Plugin); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdatePlugin2Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdatePluginRequest

		if err := codec.DecodeRequestBody(r, &_req.Plugin); err != nil {
			return nil, err
		}

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		pluginName := []string{chi.URLParam(r, "pluginName")}
		if err := codec.DecodeRequestParam("pluginName", pluginName, &_req.PluginName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateRouteRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateRouteRequest

		if err := codec.DecodeRequestBody(r, &_req.Route); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateRoute1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateRouteRequest

		if err := codec.DecodeRequestBody(r, &_req.Route); err != nil {
			return nil, err
		}

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateServiceRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateServiceRequest

		if err := codec.DecodeRequestBody(r, &_req.Svc); err != nil {
			return nil, err
		}

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateService1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateServiceRequest

		if err := codec.DecodeRequestBody(r, &_req.Svc); err != nil {
			return nil, err
		}

		routeName := []string{chi.URLParam(r, "routeName")}
		if err := codec.DecodeRequestParam("routeName", routeName, &_req.RouteName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateUpstreamRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateUpstreamRequest

		if err := codec.DecodeRequestBody(r, &_req.Upstream); err != nil {
			return nil, err
		}

		upstreamName := []string{chi.URLParam(r, "upstreamName")}
		if err := codec.DecodeRequestParam("upstreamName", upstreamName, &_req.UpstreamName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpdateUpstream1Request(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpdateUpstreamRequest

		if err := codec.DecodeRequestBody(r, &_req.Upstream); err != nil {
			return nil, err
		}

		serviceName := []string{chi.URLParam(r, "serviceName")}
		if err := codec.DecodeRequestParam("serviceName", serviceName, &_req.ServiceName); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}
