// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package admin

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/olaf"
	"github.com/RussellLuo/validating/v2"
	"github.com/go-kit/kit/endpoint"
)

type CreatePluginRequest struct {
	ServiceName string       `json:"-"`
	RouteName   string       `json:"-"`
	P           *olaf.Plugin `json:"p"`
}

// ValidateCreatePluginRequest creates a validator for CreatePluginRequest.
func ValidateCreatePluginRequest(newSchema func(*CreatePluginRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*CreatePluginRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type CreatePluginResponse struct {
	Plugin *olaf.Plugin `json:"plugin"`
	Err    error        `json:"-"`
}

func (r *CreatePluginResponse) Body() interface{} { return r.Plugin }

// Failed implements endpoint.Failer.
func (r *CreatePluginResponse) Failed() error { return r.Err }

// MakeEndpointOfCreatePlugin creates the endpoint for s.CreatePlugin.
func MakeEndpointOfCreatePlugin(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreatePluginRequest)
		plugin, err := s.CreatePlugin(
			ctx,
			req.ServiceName,
			req.RouteName,
			req.P,
		)
		return &CreatePluginResponse{
			Plugin: plugin,
			Err:    err,
		}, nil
	}
}

type CreateRouteRequest struct {
	ServiceName string      `json:"-"`
	Route       *olaf.Route `json:"route"`
}

// ValidateCreateRouteRequest creates a validator for CreateRouteRequest.
func ValidateCreateRouteRequest(newSchema func(*CreateRouteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*CreateRouteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type CreateRouteResponse struct {
	Err error `json:"-"`
}

func (r *CreateRouteResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *CreateRouteResponse) Failed() error { return r.Err }

// MakeEndpointOfCreateRoute creates the endpoint for s.CreateRoute.
func MakeEndpointOfCreateRoute(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateRouteRequest)
		err := s.CreateRoute(
			ctx,
			req.ServiceName,
			req.Route,
		)
		return &CreateRouteResponse{
			Err: err,
		}, nil
	}
}

type CreateServiceRequest struct {
	Svc *olaf.Service `json:"svc"`
}

// ValidateCreateServiceRequest creates a validator for CreateServiceRequest.
func ValidateCreateServiceRequest(newSchema func(*CreateServiceRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*CreateServiceRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type CreateServiceResponse struct {
	Err error `json:"-"`
}

func (r *CreateServiceResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *CreateServiceResponse) Failed() error { return r.Err }

// MakeEndpointOfCreateService creates the endpoint for s.CreateService.
func MakeEndpointOfCreateService(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateServiceRequest)
		err := s.CreateService(
			ctx,
			req.Svc,
		)
		return &CreateServiceResponse{
			Err: err,
		}, nil
	}
}

type DeletePluginRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
	PluginName  string `json:"-"`
}

// ValidateDeletePluginRequest creates a validator for DeletePluginRequest.
func ValidateDeletePluginRequest(newSchema func(*DeletePluginRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeletePluginRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeletePluginResponse struct {
	Err error `json:"-"`
}

func (r *DeletePluginResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeletePluginResponse) Failed() error { return r.Err }

// MakeEndpointOfDeletePlugin creates the endpoint for s.DeletePlugin.
func MakeEndpointOfDeletePlugin(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeletePluginRequest)
		err := s.DeletePlugin(
			ctx,
			req.ServiceName,
			req.RouteName,
			req.PluginName,
		)
		return &DeletePluginResponse{
			Err: err,
		}, nil
	}
}

type DeleteRouteRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
}

// ValidateDeleteRouteRequest creates a validator for DeleteRouteRequest.
func ValidateDeleteRouteRequest(newSchema func(*DeleteRouteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteRouteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteRouteResponse struct {
	Err error `json:"-"`
}

func (r *DeleteRouteResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteRouteResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteRoute creates the endpoint for s.DeleteRoute.
func MakeEndpointOfDeleteRoute(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteRouteRequest)
		err := s.DeleteRoute(
			ctx,
			req.ServiceName,
			req.RouteName,
		)
		return &DeleteRouteResponse{
			Err: err,
		}, nil
	}
}

type DeleteServiceRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
}

// ValidateDeleteServiceRequest creates a validator for DeleteServiceRequest.
func ValidateDeleteServiceRequest(newSchema func(*DeleteServiceRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteServiceRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteServiceResponse struct {
	Err error `json:"-"`
}

func (r *DeleteServiceResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteServiceResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteService creates the endpoint for s.DeleteService.
func MakeEndpointOfDeleteService(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteServiceRequest)
		err := s.DeleteService(
			ctx,
			req.ServiceName,
			req.RouteName,
		)
		return &DeleteServiceResponse{
			Err: err,
		}, nil
	}
}

type GetConfigResponse struct {
	Data *olaf.Data `json:"data"`
	Err  error      `json:"-"`
}

func (r *GetConfigResponse) Body() interface{} { return r.Data }

// Failed implements endpoint.Failer.
func (r *GetConfigResponse) Failed() error { return r.Err }

// MakeEndpointOfGetConfig creates the endpoint for s.GetConfig.
func MakeEndpointOfGetConfig(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		data, err := s.GetConfig(
			ctx,
		)
		return &GetConfigResponse{
			Data: data,
			Err:  err,
		}, nil
	}
}

type GetPluginRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
	PluginName  string `json:"-"`
}

// ValidateGetPluginRequest creates a validator for GetPluginRequest.
func ValidateGetPluginRequest(newSchema func(*GetPluginRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetPluginRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetPluginResponse struct {
	Plugin *olaf.Plugin `json:"plugin"`
	Err    error        `json:"-"`
}

func (r *GetPluginResponse) Body() interface{} { return r.Plugin }

// Failed implements endpoint.Failer.
func (r *GetPluginResponse) Failed() error { return r.Err }

// MakeEndpointOfGetPlugin creates the endpoint for s.GetPlugin.
func MakeEndpointOfGetPlugin(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetPluginRequest)
		plugin, err := s.GetPlugin(
			ctx,
			req.ServiceName,
			req.RouteName,
			req.PluginName,
		)
		return &GetPluginResponse{
			Plugin: plugin,
			Err:    err,
		}, nil
	}
}

type GetRouteRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
}

// ValidateGetRouteRequest creates a validator for GetRouteRequest.
func ValidateGetRouteRequest(newSchema func(*GetRouteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRouteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRouteResponse struct {
	Route *olaf.Route `json:"route"`
	Err   error       `json:"-"`
}

func (r *GetRouteResponse) Body() interface{} { return r.Route }

// Failed implements endpoint.Failer.
func (r *GetRouteResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRoute creates the endpoint for s.GetRoute.
func MakeEndpointOfGetRoute(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRouteRequest)
		route, err := s.GetRoute(
			ctx,
			req.ServiceName,
			req.RouteName,
		)
		return &GetRouteResponse{
			Route: route,
			Err:   err,
		}, nil
	}
}

type GetServiceRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
}

// ValidateGetServiceRequest creates a validator for GetServiceRequest.
func ValidateGetServiceRequest(newSchema func(*GetServiceRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetServiceRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetServiceResponse struct {
	Service *olaf.Service `json:"service"`
	Err     error         `json:"-"`
}

func (r *GetServiceResponse) Body() interface{} { return r.Service }

// Failed implements endpoint.Failer.
func (r *GetServiceResponse) Failed() error { return r.Err }

// MakeEndpointOfGetService creates the endpoint for s.GetService.
func MakeEndpointOfGetService(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetServiceRequest)
		service, err := s.GetService(
			ctx,
			req.ServiceName,
			req.RouteName,
		)
		return &GetServiceResponse{
			Service: service,
			Err:     err,
		}, nil
	}
}

type GetUpstreamRequest struct {
	UpstreamName string `json:"-"`
	ServiceName  string `json:"-"`
}

// ValidateGetUpstreamRequest creates a validator for GetUpstreamRequest.
func ValidateGetUpstreamRequest(newSchema func(*GetUpstreamRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetUpstreamRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetUpstreamResponse struct {
	Upstream *olaf.Upstream `json:"upstream"`
	Err      error          `json:"-"`
}

func (r *GetUpstreamResponse) Body() interface{} { return r.Upstream }

// Failed implements endpoint.Failer.
func (r *GetUpstreamResponse) Failed() error { return r.Err }

// MakeEndpointOfGetUpstream creates the endpoint for s.GetUpstream.
func MakeEndpointOfGetUpstream(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetUpstreamRequest)
		upstream, err := s.GetUpstream(
			ctx,
			req.UpstreamName,
			req.ServiceName,
		)
		return &GetUpstreamResponse{
			Upstream: upstream,
			Err:      err,
		}, nil
	}
}

type ListPluginsRequest struct {
	ServiceName string `json:"-"`
	RouteName   string `json:"-"`
}

// ValidateListPluginsRequest creates a validator for ListPluginsRequest.
func ValidateListPluginsRequest(newSchema func(*ListPluginsRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ListPluginsRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ListPluginsResponse struct {
	Plugins []*olaf.Plugin `json:"plugins"`
	Err     error          `json:"-"`
}

func (r *ListPluginsResponse) Body() interface{} { return r.Plugins }

// Failed implements endpoint.Failer.
func (r *ListPluginsResponse) Failed() error { return r.Err }

// MakeEndpointOfListPlugins creates the endpoint for s.ListPlugins.
func MakeEndpointOfListPlugins(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ListPluginsRequest)
		plugins, err := s.ListPlugins(
			ctx,
			req.ServiceName,
			req.RouteName,
		)
		return &ListPluginsResponse{
			Plugins: plugins,
			Err:     err,
		}, nil
	}
}

type ListRoutesRequest struct {
	ServiceName string `json:"-"`
}

// ValidateListRoutesRequest creates a validator for ListRoutesRequest.
func ValidateListRoutesRequest(newSchema func(*ListRoutesRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ListRoutesRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ListRoutesResponse struct {
	Routes []*olaf.Route `json:"routes"`
	Err    error         `json:"-"`
}

func (r *ListRoutesResponse) Body() interface{} { return r.Routes }

// Failed implements endpoint.Failer.
func (r *ListRoutesResponse) Failed() error { return r.Err }

// MakeEndpointOfListRoutes creates the endpoint for s.ListRoutes.
func MakeEndpointOfListRoutes(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ListRoutesRequest)
		routes, err := s.ListRoutes(
			ctx,
			req.ServiceName,
		)
		return &ListRoutesResponse{
			Routes: routes,
			Err:    err,
		}, nil
	}
}

type ListServicesResponse struct {
	Services []*olaf.Service `json:"services"`
	Err      error           `json:"-"`
}

func (r *ListServicesResponse) Body() interface{} { return r.Services }

// Failed implements endpoint.Failer.
func (r *ListServicesResponse) Failed() error { return r.Err }

// MakeEndpointOfListServices creates the endpoint for s.ListServices.
func MakeEndpointOfListServices(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		services, err := s.ListServices(
			ctx,
		)
		return &ListServicesResponse{
			Services: services,
			Err:      err,
		}, nil
	}
}

type ListUpstreamsResponse struct {
	Upstreams []*olaf.Upstream `json:"upstreams"`
	Err       error            `json:"-"`
}

func (r *ListUpstreamsResponse) Body() interface{} { return r.Upstreams }

// Failed implements endpoint.Failer.
func (r *ListUpstreamsResponse) Failed() error { return r.Err }

// MakeEndpointOfListUpstreams creates the endpoint for s.ListUpstreams.
func MakeEndpointOfListUpstreams(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		upstreams, err := s.ListUpstreams(
			ctx,
		)
		return &ListUpstreamsResponse{
			Upstreams: upstreams,
			Err:       err,
		}, nil
	}
}

type UpdatePluginRequest struct {
	ServiceName string       `json:"-"`
	RouteName   string       `json:"-"`
	PluginName  string       `json:"-"`
	Plugin      *olaf.Plugin `json:"plugin"`
}

// ValidateUpdatePluginRequest creates a validator for UpdatePluginRequest.
func ValidateUpdatePluginRequest(newSchema func(*UpdatePluginRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdatePluginRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdatePluginResponse struct {
	Err error `json:"-"`
}

func (r *UpdatePluginResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpdatePluginResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdatePlugin creates the endpoint for s.UpdatePlugin.
func MakeEndpointOfUpdatePlugin(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdatePluginRequest)
		err := s.UpdatePlugin(
			ctx,
			req.ServiceName,
			req.RouteName,
			req.PluginName,
			req.Plugin,
		)
		return &UpdatePluginResponse{
			Err: err,
		}, nil
	}
}

type UpdateRouteRequest struct {
	ServiceName string      `json:"-"`
	RouteName   string      `json:"-"`
	Route       *olaf.Route `json:"route"`
}

// ValidateUpdateRouteRequest creates a validator for UpdateRouteRequest.
func ValidateUpdateRouteRequest(newSchema func(*UpdateRouteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdateRouteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdateRouteResponse struct {
	Err error `json:"-"`
}

func (r *UpdateRouteResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpdateRouteResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdateRoute creates the endpoint for s.UpdateRoute.
func MakeEndpointOfUpdateRoute(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateRouteRequest)
		err := s.UpdateRoute(
			ctx,
			req.ServiceName,
			req.RouteName,
			req.Route,
		)
		return &UpdateRouteResponse{
			Err: err,
		}, nil
	}
}

type UpdateServiceRequest struct {
	ServiceName string        `json:"-"`
	RouteName   string        `json:"-"`
	Svc         *olaf.Service `json:"svc"`
}

// ValidateUpdateServiceRequest creates a validator for UpdateServiceRequest.
func ValidateUpdateServiceRequest(newSchema func(*UpdateServiceRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdateServiceRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdateServiceResponse struct {
	Err error `json:"-"`
}

func (r *UpdateServiceResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpdateServiceResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdateService creates the endpoint for s.UpdateService.
func MakeEndpointOfUpdateService(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateServiceRequest)
		err := s.UpdateService(
			ctx,
			req.ServiceName,
			req.RouteName,
			req.Svc,
		)
		return &UpdateServiceResponse{
			Err: err,
		}, nil
	}
}

type UpdateUpstreamRequest struct {
	UpstreamName string         `json:"-"`
	ServiceName  string         `json:"-"`
	Upstream     *olaf.Upstream `json:"upstream"`
}

// ValidateUpdateUpstreamRequest creates a validator for UpdateUpstreamRequest.
func ValidateUpdateUpstreamRequest(newSchema func(*UpdateUpstreamRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdateUpstreamRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdateUpstreamResponse struct {
	Err error `json:"-"`
}

func (r *UpdateUpstreamResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpdateUpstreamResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdateUpstream creates the endpoint for s.UpdateUpstream.
func MakeEndpointOfUpdateUpstream(s Admin) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateUpstreamRequest)
		err := s.UpdateUpstream(
			ctx,
			req.UpstreamName,
			req.ServiceName,
			req.Upstream,
		)
		return &UpdateUpstreamResponse{
			Err: err,
		}, nil
	}
}
